/*==========================================================================*/
/*!
 * @file svc/rm/rpc.h
 *
 * Header file for the RM RPC implementation.
 *
 * @addtogroup RM_SVC
 * @{
 */
/*==========================================================================*/

/* DO NOT EDIT - This file auto generated by rpc_h.pl */

#ifndef _SC_RM_RPC_H
#define _SC_RM_RPC_H

/* Includes */

#include <soc/imx8/sc/rpc.h>

/* Defines */

/* Types */

typedef enum rm_func_e
{
    RM_FUNC_UNKNOWN,
    RM_FUNC_PARTITION_ALLOC,
    RM_FUNC_PARTITION_FREE,
    RM_FUNC_PARTITION_STATIC,
    RM_FUNC_PARTITION_LOCK,
    RM_FUNC_GET_PARTITION,
    RM_FUNC_SET_PARENT,
    RM_FUNC_MOVE_ALL,
    RM_FUNC_ASSIGN_RESOURCE,
    RM_FUNC_SET_RESOURCE_MOVABLE,
    RM_FUNC_SET_MASTER_ATTRIBUTES,
    RM_FUNC_SET_MASTER_SID,
    RM_FUNC_SET_PERIPHERAL_PERMISSIONS,
    RM_FUNC_IS_RESOURCE_OWNED,
    RM_FUNC_IS_RESOURCE_MASTER,
    RM_FUNC_IS_RESOURCE_PERIPHERAL,
    RM_FUNC_GET_RESOURCE_INFO,
    RM_FUNC_MEMREG_ALLOC,
    RM_FUNC_MEMREG_FREE,
    RM_FUNC_ASSIGN_MEMREG,
    RM_FUNC_SET_MEMREG_PERMISSIONS,
    RM_FUNC_IS_MEMREG_OWNED,
    RM_FUNC_GET_MEMREG_INFO,
    RM_FUNC_ASSIGN_PIN,
    RM_FUNC_IS_PIN_OWNED
} rm_func_t;

/* Functions */

void rm_dispatch(sc_rm_pt_t caller_pt, sc_rpc_msg_t *msg);

#endif /* _SC_RM_RPC_H */

/**@}*/

