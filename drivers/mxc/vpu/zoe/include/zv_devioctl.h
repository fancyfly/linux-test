/*
 * Copyright (c) 2012-2015, Freescale Semiconductor, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


///////////////////////////////////////////////////////////////////////////////
//
// zv_devioctl.h
//
// Description: 
//
//  ZVV4LDEV ioctl interface
// 
// Authors: (dtao) David Tao
//
///////////////////////////////////////////////////////////////////////////////

#ifndef __ZV_DEVIOCTL_H__
#define __ZV_DEVIOCTL_H__


#include "zv_devcntl.h"
#include "zv_devdiag.h"
#include "zv_codec.h"


#ifndef _IOR_BAD
#define _IOR_BAD(type,nr,size)		_IOR(type,nr,size)
#endif // !_IOR_BAD
#ifndef _IOW_BAD
#define _IOW_BAD(type,nr,size)		_IOW(type,nr,size)
#endif // !_IOW_BAD
#ifndef _IOWR_BAD
#define _IOWR_BAD(type,nr,size)		_IOWR(type,nr,size)
#endif // !_IOWR_BAD


// ioctl base
//

#define ZVDEV_STRM_IOCTL_BASE		0
#define ZVDEV_CNTL_IOCTL_BASE		0
#define ZVDEV_DIAG_IOCTL_BASE		0

#define ZVDEV_STRM_IOCTL_TYPE		'S'
#define ZVDEV_CNTL_IOCTL_TYPE		'C'
#define ZVDEV_DIAG_IOCTL_TYPE		'D'




/////////////////////////////////////////////////////////////////////////////
//
//

// stream extension interface
//

typedef enum _COMPONENT_PORT_TYPE
{
	COMPONENT_PORT_COMP_OUT = 0,
	COMPONENT_PORT_META_OUT,
	COMPONENT_PORT_YUV_OUT,
	COMPONENT_PORT_VIRTUAL_OUT,

	COMPONENT_PORT_YUV_IN,
	COMPONENT_PORT_COMP_IN,
	COMPONENT_PORT_VIRTUAL_IN,
	COMPONENT_PORT_END

} COMPONENT_PORT_TYPE, *PCOMPONENT_PORT_TYPE;

#define MAX_COMPONENT_PORT		COMPONENT_PORT_END


typedef enum _COMPONENT_TYPE
{
	COMPONENT_TYPE_CODEC = TASK_TYPE_CODEC,
	COMPONENT_TYPE_DECODER = TASK_TYPE_DECODER,
	COMPONENT_TYPE_ENCODER = TASK_TYPE_ENCODER

} COMPONENT_TYPE, *PCOMPONENT_TYPE;


#pragma pack(4)

typedef union _COMPONENT_PORT_OPEN_FORMAT
{
	ZV_YUV_DATAFORMAT   yuv;

} COMPONENT_PORT_OPEN_FORMAT, *PCOMPONENT_PORT_OPEN_FORMAT;


typedef struct _COMPONENT_PORT_OPEN
{
	uint32_t				    type;
	COMPONENT_PORT_OPEN_FORMAT	format;
} COMPONENT_PORT_OPEN, *PCOMPONENT_PORT_OPEN;


typedef struct _ZVDEV_INFO
{
	uint32_t            busType;
	uint32_t	        devInstance;
    uint32_t            type; // COMPONENT_TYPE
	ZOE_OBJECT_HANDLE	hTask;
} ZVDEV_INFO, *PZVDEV_INFO;


typedef struct _ZVDEV_PROXY_EVENT
{
	uint32_t        event;
    uint32_t        timeout_ms;
} ZVDEV_PROXY_EVENT, *PZVDEV_PROXY_EVENT;


#define ZVDEV_PROXY_EVEVT_TERM                  1

#pragma pack()

#define ZVDEV_STRM_IOCTL_PORT_OPEN		        _IOW_BAD(ZVDEV_STRM_IOCTL_TYPE, ZVDEV_STRM_IOCTL_BASE, COMPONENT_PORT_OPEN)
#define ZVDEV_STRM_IOCTL_PORT_CLOSE		        _IOW_BAD(ZVDEV_STRM_IOCTL_TYPE, ZVDEV_STRM_IOCTL_BASE + 1, COMPONENT_PORT_TYPE)
#define ZVDEV_STRM_IOCTL_DEVICE_INFO	        _IOWR_BAD(ZVDEV_STRM_IOCTL_TYPE, ZVDEV_STRM_IOCTL_BASE + 2, ZVDEV_INFO)
#define ZVDEV_STRM_IOCTL_ACQUIRE		        _IO(ZVDEV_STRM_IOCTL_TYPE, ZVDEV_STRM_IOCTL_BASE + 3)
#define ZVDEV_STRM_IOCTL_PROXY_SET_USER	        _IO(ZVDEV_STRM_IOCTL_TYPE, ZVDEV_STRM_IOCTL_BASE + 4)
#define ZVDEV_STRM_IOCTL_PROXY_TERM_USER        _IO(ZVDEV_STRM_IOCTL_TYPE, ZVDEV_STRM_IOCTL_BASE + 5)
#define ZVDEV_STRM_IOCTL_PROXY_WAIT_EVENT       _IOWR_BAD(ZVDEV_STRM_IOCTL_TYPE, ZVDEV_STRM_IOCTL_BASE + 6, ZVDEV_PROXY_EVENT)


/////////////////////////////////////////////////////////////////////////////
//
//

// device control interface
//

#define ZVDEV_CNTL_IOCTL_SET		            ZVDEV_CNTL_IOCTL_BASE
#define ZVDEV_CNTL_IOCTL_GET		            (ZVDEV_CNTL_IOCTL_BASE + 100)

// set
#define ZVDEV_CNTL_IOCTL_SET_TEST_CONTROL		_IOW_BAD(ZVDEV_CNTL_IOCTL_TYPE, ZVDEV_CNTL_IOCTL_SET + ZV_CODEC_PROP_TEST_CONTROL, ZV_CODEC_TEST_CONTROL)

// get
#define ZVDEV_CNTL_IOCTL_GET_TEST_CONTROL		_IOWR_BAD(ZVDEV_CNTL_IOCTL_TYPE, ZVDEV_CNTL_IOCTL_GET + ZV_CODEC_PROP_TEST_CONTROL, ZV_CODEC_TEST_CONTROL)


/////////////////////////////////////////////////////////////////////////////
//
//

// diagnostic interface
//

#define ZVDEV_DIAG_IOCTL_MEM_READ				_IOWR_BAD(ZVDEV_DIAG_IOCTL_TYPE, ZVDEV_DIAG_IOCTL_BASE + ZV_CODEC_DIAG_MEM_READ, ZV_CODEC_DIAG_MEMORY_STRUCT)
#define ZVDEV_DIAG_IOCTL_MEM_WRITE				_IOW_BAD(ZVDEV_DIAG_IOCTL_TYPE, ZVDEV_DIAG_IOCTL_BASE + ZV_CODEC_DIAG_MEM_WRITE, ZV_CODEC_DIAG_MEMORY_STRUCT)
#define ZVDEV_DIAG_IOCTL_REG_READ				_IOWR_BAD(ZVDEV_DIAG_IOCTL_TYPE, ZVDEV_DIAG_IOCTL_BASE + ZV_CODEC_DIAG_REG_READ, ZV_CODEC_DIAG_REGISTER_STRUCT)
#define ZVDEV_DIAG_IOCTL_REG_WRITE				_IOW_BAD(ZVDEV_DIAG_IOCTL_TYPE, ZVDEV_DIAG_IOCTL_BASE + ZV_CODEC_DIAG_REG_WRITE, ZV_CODEC_DIAG_REGISTER_STRUCT)
#define ZVDEV_DIAG_IOCTL_REG_READ_EX			_IOWR_BAD(ZVDEV_DIAG_IOCTL_TYPE, ZVDEV_DIAG_IOCTL_BASE + ZV_CODEC_DIAG_REG_READ_EX, ZV_CODEC_DIAG_REGISTER_STRUCT_EX)
#define ZVDEV_DIAG_IOCTL_REG_WRITE_EX			_IOW_BAD(ZVDEV_DIAG_IOCTL_TYPE, ZVDEV_DIAG_IOCTL_BASE + ZV_CODEC_DIAG_REG_WRITE, ZV_CODEC_DIAG_REGISTER_STRUCT_EX)
#define ZVDEV_DIAG_IOCTL_DMA_READ_PTR			_IOWR_BAD(ZVDEV_DIAG_IOCTL_TYPE, ZVDEV_DIAG_IOCTL_BASE + ZV_CODEC_DIAG_DMA_READ_PTR, ZV_CODEC_DIAG_DMA_PTR_STRUCT)
#define ZVDEV_DIAG_IOCTL_DMA_WRITE_PTR			_IOW_BAD(ZVDEV_DIAG_IOCTL_TYPE, ZVDEV_DIAG_IOCTL_BASE + ZV_CODEC_DIAG_DMA_WRITE_PTR, ZV_CODEC_DIAG_DMA_PTR_STRUCT)
#define ZVDEV_DIAG_IOCTL_WAIT_ISR				_IOWR_BAD(ZVDEV_DIAG_IOCTL_TYPE, ZVDEV_DIAG_IOCTL_BASE + ZV_CODEC_DIAG_WAIT_ISR, ZV_CODEC_DIAG_WAIT_ISR_STRUCT)
#define ZVDEV_DIAG_IOCTL_ENABLE_WAIT_ISR		_IOW_BAD(ZVDEV_DIAG_IOCTL_TYPE, ZVDEV_DIAG_IOCTL_BASE + ZV_CODEC_DIAG_ENABLE_WAIT_ISR, ZV_CODEC_DIAG_ENABLE_WAIT_ISR_STRUCT)
#define ZVDEV_DIAG_IOCTL_DISABLE_WAIT_ISR		_IOW_BAD(ZVDEV_DIAG_IOCTL_TYPE, ZVDEV_DIAG_IOCTL_BASE + ZV_CODEC_DIAG_DISABLE_WAIT_ISR, ZV_CODEC_DIAG_DISABLE_WAIT_ISR_STRUCT)
#define ZVDEV_DIAG_IOCTL_SET_ISR		        _IOW_BAD(ZVDEV_DIAG_IOCTL_TYPE, ZVDEV_DIAG_IOCTL_BASE + ZV_CODEC_DIAG_SET_ISR, ZV_CODEC_DIAG_SET_ISR_STRUCT)
#define ZVDEV_DIAG_IOCTL_IPC_REG				_IOW_BAD(ZVDEV_DIAG_IOCTL_TYPE, ZVDEV_DIAG_IOCTL_BASE + ZV_CODEC_DIAG_IPC_REG, ZV_CODEC_DIAG_IPC_REG_STRUCT)
#define ZVDEV_DIAG_IOCTL_IPC_TEST				_IOW_BAD(ZVDEV_DIAG_IOCTL_TYPE, ZVDEV_DIAG_IOCTL_BASE + ZV_CODEC_DIAG_IPC_TEST, ZV_CODEC_DIAG_IPC_TEST_STRUCT)
#define ZVDEV_DIAG_IOCTL_CHIP_VERSION			_IOWR_BAD(ZVDEV_DIAG_IOCTL_TYPE, ZVDEV_DIAG_IOCTL_BASE + ZV_CODEC_DIAG_CHIP_VERSION, ZV_CODEC_DIAG_CHIP_VERSION_STRUCT)


#endif //__ZV_DEVIOCTL_H__





